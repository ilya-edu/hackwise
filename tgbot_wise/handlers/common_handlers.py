import asyncio
from datetime import datetime
import logging

from aiogram import F, Router, html
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionSender
from aiogram.utils.formatting import Text, as_list, as_marked_section
from sqlmodel import Session, select
from database.schemas import User

from bot_connections.api.requests import create_message
from bot_connections.sockets.sockets import websocket_listener, ws_connections
from keyboards import common_keyboards as kbs

from config import config

router = Router()


@router.message(
    CommandStart(deep_link=True),
)
async def command_start_chat_from_web(
    message: Message, command: CommandObject, db_engine
) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å —Å–∞–π—Ç–∞.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        command (CommandObject): —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
        chat_info (dict): —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ Telegram
    """
    answer = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {html.bold(message.from_user.full_name)}!\n"
    user_id = command.args
    answer += f"–í–∞—à ID: {html.code(user_id)}\n"
    answer += "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ, –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
    async with ChatActionSender.typing(bot=message.bot, chat_id=message.chat.id):
        with Session(db_engine) as session:
            await message.answer(answer)

            db_user = session.exec(select(User).where(User.tg_id == user_id)).first()

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞—à—ë–ª –≤ –±–æ—Ç–∞
            if db_user is None:
                logging.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î. –°–æ–∑–¥–∞—ë–º...")

                api_message = await create_message(
                    user_id=None,
                    room_id=None,
                    message_text=None,
                    is_admin=config.default_admin_view,
                )
                # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                if isinstance(api_message, str):
                    await message.answer(api_message)
                # –ò–Ω–∞—á–µ –ø–∏—à–µ–º –≤ —á–∞—Ç ID –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏ –¥–µ–±–∞–≥ —Ä–µ–∂–∏–º–µ
                else:
                    if config.level in ["DEBUG", "INFO"]:
                        mode_info = (
                            f"{html.bold("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞-–∞–¥–º–∏–Ω–∞")} (–¥–ª—è —Ç–µ—Å—Ç–∞).\n"
                            + "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ò–ò –±–µ–∑ —É—á–∞—Å—Ç–∏—è —á–µ–ª–æ–≤–µ–∫–∞."
                            + "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
                            + "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –±–æ—Ç–∞ –∏ –≤—ã–±–µ—Ä–µ—Ç–µ ¬´–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å¬ª.\n"
                        )
                        room_str = f"ID –í–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã: {api_message.room_id}"
                        await message.answer(
                            mode_info + room_str,
                            reply_markup=kbs.start_keyboard_markup(
                                config.default_admin_view
                            ),
                        )
                room_id = api_message.room_id
                internal_id = api_message.user.name

                session.add(
                    User(
                        tg_id=message.from_user.id,
                        tg_chat_id=message.chat.id,
                        tg_username=message.from_user.username,
                        tg_fullname=message.from_user.full_name,
                        tg_is_user_admin=config.default_admin_view,
                        internal_room_id=room_id,
                        internal_username=internal_id,
                    )
                )
                session.commit()
            else:
                logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {db_user.tg_id} –µ—Å—Ç—å –≤ –±–∞–∑–µ")
                room_id = db_user.internal_room_id
                internal_id = db_user.internal_username
                if config.level == "DEBUG":
                    await message.answer(
                        f"ID –í–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã: {db_user.internal_room_id}",
                        reply_markup=kbs.start_keyboard_markup(
                            db_user.tg_is_user_admin
                        ),
                    )

            await asyncio.sleep(1)
            # –ü–æ–¥–Ω–∏–º–∞–µ–º WebSocket –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –±–µ–∫–æ–º
            if message.chat.id not in ws_connections:
                # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ WebSocket –¥–ª—è —ç—Ç–æ–≥–æ chat_id
                asyncio.create_task(
                    websocket_listener(
                        message.bot,
                        message.chat.id,
                        internal_id,
                        room_id,
                    )
                )


@router.message(CommandStart())
async def command_start_handler(message: Message, db_engine) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π
    """
    answer = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {html.bold(message.from_user.full_name)}!\n"
    answer += "–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å."
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞, —á—Ç–æ –æ–Ω –ø–µ—á–∞—Ç–∞–µ—Ç –≤ —á–∞—Ç
    async with ChatActionSender.typing(bot=message.bot, chat_id=message.chat.id):
        with Session(db_engine) as session:
            await message.answer(answer)

            db_user = session.exec(
                select(User).where(User.tg_id == message.from_user.id)
            ).first()

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞—à—ë–ª –≤ –±–æ—Ç–∞
            if db_user is None:
                logging.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î. –°–æ–∑–¥–∞—ë–º...")

                api_message = await create_message(
                    user_id=None,
                    room_id=None,
                    message_text=None,
                    is_admin=config.default_admin_view,
                )
                # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                if isinstance(api_message, str):
                    await message.answer(api_message)
                # –ò–Ω–∞—á–µ –ø–∏—à–µ–º –≤ —á–∞—Ç ID –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏ –¥–µ–±–∞–≥ —Ä–µ–∂–∏–º–µ
                else:
                    if config.level in ["DEBUG", "INFO"]:
                        mode_info = (
                            f"{html.bold("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞-–∞–¥–º–∏–Ω–∞")} (–¥–ª—è —Ç–µ—Å—Ç–∞).\n"
                            + "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ò–ò –±–µ–∑ —É—á–∞—Å—Ç–∏—è —á–µ–ª–æ–≤–µ–∫–∞."
                            + "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
                            + "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –±–æ—Ç–∞ –∏ –≤—ã–±–µ—Ä–µ—Ç–µ ¬´–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å¬ª.\n"
                        )
                        room_str = f"ID –í–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã: {api_message.room_id}"
                        await message.answer(
                            mode_info + room_str,
                            reply_markup=kbs.start_keyboard_markup(
                                config.default_admin_view
                            ),
                        )
                room_id = api_message.room_id
                internal_id = api_message.user.name

                session.add(
                    User(
                        tg_id=message.from_user.id,
                        tg_chat_id=message.chat.id,
                        tg_username=message.from_user.username,
                        tg_fullname=message.from_user.full_name,
                        tg_is_user_admin=config.default_admin_view,
                        internal_room_id=room_id,
                        internal_username=internal_id,
                    )
                )
                session.commit()
            else:
                logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {db_user.tg_id} –µ—Å—Ç—å –≤ –±–∞–∑–µ")
                room_id = db_user.internal_room_id
                internal_id = db_user.internal_username
                if config.level == "DEBUG":
                    await message.answer(
                        f"ID –í–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã: {db_user.internal_room_id}",
                        reply_markup=kbs.start_keyboard_markup(
                            db_user.tg_is_user_admin
                        ),
                    )

            await asyncio.sleep(1)
            # –ü–æ–¥–Ω–∏–º–∞–µ–º WebSocket –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –±–µ–∫–æ–º
            if message.chat.id not in ws_connections:
                # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ WebSocket –¥–ª—è —ç—Ç–æ–≥–æ chat_id
                asyncio.create_task(
                    websocket_listener(
                        message.bot,
                        message.chat.id,
                        internal_id,
                        room_id,
                    )
                )


@router.message(F.text == "üåç –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç")
async def go_to_web_btn_handler(message: Message) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ web —á–∞—Ç.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await message.reply(
        "–•–æ—Ä–æ—à–æ! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá\n–ß–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å—ë—Ç—Å—è",
        reply_markup=kbs.go_to_web_keyboard_markup(),
    )


@router.message(F.text == "ü§ñ –û –±–æ—Ç–µ")
async def about_bot_btn_handler(message: Message) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏ –æ –±–æ—Ç–µ.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await message.reply(
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –∞–≥–µ–Ω—Ç—Å–∫–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!"
    )


@router.message(F.text.in_({"üë§ –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ö†Ô∏è –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞"}))
async def enable_user_mode_btn_handler(message: Message, db_engine) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    with Session(db_engine) as session:
        db_user = session.exec(
            select(User).where(User.tg_id == message.from_user.id)
        ).first()

        if db_user is None:
            await message.answer(
                f"{html.bold("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")}\n"
                + "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ."
            )

        if db_user.tg_is_user_admin:
            await message.reply(
                "–¢–µ–ø–µ—Ä—å –í—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!",
                reply_markup=kbs.keyboard_remove(),
            )
            await message.reply(
                "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=kbs.start_keyboard_markup(is_admin=False),
            )
        else:
            await message.reply(
                "–¢–µ–ø–µ—Ä—å –í—ã –∞–¥–º–∏–Ω!",
                reply_markup=kbs.keyboard_remove(),
            )
            await message.reply(
                "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=kbs.start_keyboard_markup(is_admin=True),
            )

        db_user.tg_is_user_admin = not db_user.tg_is_user_admin
        session.add(db_user)
        session.commit()


@router.callback_query(F.data == "voted_up")
async def thumb_up_btn_handler(message: Message) -> None:
    """
    Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –ª–∞–π–∫–∞.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # TODO: –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –±–µ–∫
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")


@router.callback_query(F.data == "voted_down")
async def thumb_down_btn_handler(message: Message) -> None:
    """
    Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –¥–∏–∑–ª–∞–π–∫–∞.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # TODO: –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –±–µ–∫
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –ë—É–¥–µ–º —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤!")


@router.message(Command("info", prefix="!"))
async def info_handler(message: Message, system_info: dict) -> None:
    """
    –°–∏—Å—Ç–µ–º–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        system_info (dict): –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    """
    content = as_list(
        as_marked_section(
            Text(html.bold("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")),
            f"üöÄ –ó–∞–ø—É—Å–∫: {system_info["started_at"]}",
            marker=" ",
        ),
        Text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ {datetime.now().strftime("%d.%m.%Y %H:%M:%S")}"),
        sep="\n\n",
    )
    await message.answer(**content.as_kwargs(parse_mode_key="html"))


@router.message(
    F.content_type.in_(
        {
            "photo",
            "sticker",
            "animation",
            "document",
            "story",
            "audio",
            "video",
            "voice",
        }
    )
)
async def message_with_another_type_content_handler(message: Message) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    answer = f"{html.bold('K P A C U B O !')}‚ú®\n"
    answer += "–ù–æ —è —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã üëâüëàüò¨"
    await message.answer(answer)


@router.message(F.text)
async def message_handler(message: Message, db_engine) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    async with ChatActionSender.typing(bot=message.bot, chat_id=message.chat.id):
        if message.chat.id in ws_connections:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
            await ws_connections[message.chat.id].send_str(message.text)
            logging.debug(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} "
                '(@{message.from_user.username}): "{message.text}".'
            )
            with Session(db_engine) as session:
                db_user = session.exec(
                    select(User).where(User.tg_id == message.from_user.id)
                ).first()

                if db_user is None:
                    await message.answer(
                        f"{html.bold("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")}\n"
                        + "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ."
                    )
        else:
            with Session(db_engine) as session:
                db_user = session.exec(
                    select(User).where(User.tg_id == message.from_user.id)
                ).first()

                if db_user is None:
                    await message.answer(
                        f"{html.bold("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")}\n"
                        + "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
                    )
                else:
                    # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ WebSocket –¥–ª—è —ç—Ç–æ–≥–æ chat_id
                    asyncio.create_task(
                        websocket_listener(
                            message.bot,
                            db_user.tg_id,
                            db_user.internal_username,
                            db_user.internal_room_id,
                        )
                    )
                    room_str = (
                        "–°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
                        + f"ID –í–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã: {db_user.internal_room_id}"
                    )
                    await message.answer(room_str)

                    asyncio.sleep(1)

        await create_message(
            user_id=db_user.internal_username,
            room_id=db_user.internal_room_id,
            message_text=message.text,
            is_admin=db_user.tg_is_user_admin,
        )
